fit( playlist_genre ~ . , data = Spotify_juiced )
Spotify_rf_preds <- predict( Spotify_rf, new_data = Spotify_baked,
type = "class" )
Spotify_rf_preds <- Spotify_rf_preds %>% bind_cols(dplyr::select(Spotify_baked, playlist_genre))
Spotify_rf_preds %>%
conf_mat( truth = playlist_genre, estimate = .pred_class)
specificity(Spotify_rf_preds, truth = playlist_genre, estimate = .pred_class)
sensitivity(Spotify_rf_preds, truth = playlist_genre, estimate = .pred_class)
specificity(Spotify_rf_preds, truth = playlist_genre, estimate = .pred_class)
specificity(Spotify_knn_preds, truth = playlist_genre, estimate = .pred_class)
specificity(Spotify_lda_preds, truth = playlist_genre, estimate = .pred_class)
sensitivity(Spotify_rf_preds, truth = playlist_genre, estimate = .pred_class)
sensitivity(Spotify_knn_preds, truth = playlist_genre, estimate = .pred_class)
sensitivity(Spotify_lda_preds, truth = playlist_genre, estimate = .pred_class)
View(Spotify)
View(Spotify_prepped)
# 3800 (r&b)
new_data <- tibble(track_popularity = 62, danceability = 0.357, energy = 0.434, key = 0, loudness = -11.521, mode = 1, speechiness = 0.0418, acousticness = 0.244, instrumentalness = 0.00654, liveness = 0.0808, valence = 0.0907, tempo = 145.743, duration_ms = 257907, year = 2015)
new_data_baked <- bake(Spotify_prepped, new_data)
# 3800 (r&b)
new_data <- tibble(track_popularity = 62, danceability = 0.357, energy = 0.434, key = 0, loudness = -11.521, mode = 1, speechiness = 0.0418, acousticness = 0.244, instrumentalness = 0.00654, liveness = 0.0808, valence = 0.0907, tempo = 145.743, duration_ms = 257907)
new_data_baked <- bake(Spotify_prepped, new_data)
new_data_baked <- bake(Spotify_prepped, new_data = new_data)
View(new_data)
new_data_baked <- bake(Spotify_prepped, new_data = new_data)
View(Spotify_prepped)
View(new_data)
Spotify_rf %>%
vip()
pacman::p_load(tidyverse, skimr, dplyr, rsample, recipes, parsnip, dials, tune, lubridate, tidymodels, discrim, vip)
Spotify_rf %>%
vip()
Spotify_knn %>%
vip()
Spotify_lda %>%
vip()
new_data_preds <- predict(Spotify_rf, new_data)
View(Spotify)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, skimr, dplyr, rsample, recipes, parsnip, dials, tune, lubridate, tidymodels, discrim, vip)
Spotify <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
skim(Spotify)
pacman::p_load(inspectdf)
inspect_na(Spotify)
which(is.na(Spotify$track_name))
which(is.na(Spotify$track_artist))
which(is.na(Spotify$track_album_name))
Spotify <- na.omit(Spotify)
Spotify <- arrange(Spotify, desc(track_popularity))
Spotify <- distinct(Spotify, track_name, track_artist, .keep_all=TRUE)
Spotify <- Spotify %>% dplyr::select(-track_id, -track_name, -track_artist, -track_album_id, -track_album_name, -playlist_name, -playlist_id, -playlist_subgenre)
Spotify <- data.frame(Spotify, year = as.Date(Spotify$track_album_release_date, "%Y"))
#Spotify$year <- year(Spotify$year)
Spotify <- Spotify %>% dplyr::select(-track_album_release_date)
set.seed(111)
Spotify <- arrange(Spotify, playlist_genre)
Spotify <- Spotify %>% group_by(playlist_genre) %>% sample_n(size = 1000)
Spotify <- ungroup(Spotify)
ggplot(Spotify, aes(y= track_popularity, x= reorder(playlist_genre,track_popularity)))+
geom_boxplot()
ggplot(Spotify, aes(x = reorder(playlist_genre, speechiness), y = speechiness))+
geom_boxplot()
ggplot(Spotify, aes(x = year, y = track_popularity))+
geom_point()
set.seed( 123 )
Spotify_split <- initial_split( Spotify )
Spotify_train <- training( Spotify_split )
Spotify_test <- testing( Spotify_split )
Spotify_recipe <- recipe( playlist_genre ~ ., Spotify_train ) %>%
step_date( year, features = "year" ) %>%
step_rm (year) %>%
step_corr( all_numeric()) %>%
step_normalize( all_numeric() )
Spotify_prepped <- prep(Spotify_recipe)
Spotify_juiced <- juice( Spotify_prepped )
Spotify_baked <- bake(Spotify_prepped, new_data = Spotify_test)
set.seed(1223)
Spotify_cv <- vfold_cv(Spotify_juiced, v=10)
lda_spec <-discrim_linear( mode = "classification" )%>%set_engine( "MASS" )
Spotify_lda_resamples <-fit_resamples(object = lda_spec, preprocessor =recipe(playlist_genre~. , data = Spotify_juiced),resamples = Spotify_cv, metrics = metric_set(roc_auc, spec, sens))
Spotify_lda_resamples%>%collect_metrics()
Spotify_lda_best <- select_best(Spotify_lda_resamples, "sens")
Spotify_lda_final <- finalize_model( lda_spec, Spotify_lda_best)
Spotify_lda <- Spotify_lda_final %>%
fit( playlist_genre ~ . , data = Spotify_juiced )
Spotify_lda_preds <- predict( Spotify_lda, new_data = Spotify_baked,
type = "class" )
Spotify_lda_preds <- Spotify_lda_preds %>% bind_cols(dplyr::select(Spotify_baked, playlist_genre))
Spotify_lda_preds %>%
conf_mat( truth = playlist_genre, estimate = .pred_class)
specificity(Spotify_lda_preds, truth = playlist_genre, estimate = .pred_class)
sensitivity(Spotify_lda_preds, truth = playlist_genre, estimate = .pred_class)
#Spotify_lda_preds <- Spotify_lda_preds%>%bind_cols(predict( Spotify_lda, new_data = Spotify_baked, type = "prob" ))
#Spotify_lda_preds%>%roc_curve( truth = playlist_genre, estimate = .pred_0 )%>%autoplot()
knn_spec <- nearest_neighbor( mode = "classification", neighbors = tune() ) %>% set_engine("kknn")
set.seed(1223)
Spotify_gridreg <- grid_regular(neighbors (c(1,100)), levels = 20)
Spotify_tunegrid <- tune_grid(knn_spec, playlist_genre ~., Spotify_cv, grid = Spotify_gridreg, metrics = metric_set(roc_auc, spec, sens))
Spotify_tunegrid %>% collect_metrics()
Spotify_knn_best <- select_best(Spotify_tunegrid, "sens")
Spotify_knn_final <- finalize_model( knn_spec, Spotify_knn_best)
Spotify_knn <- Spotify_knn_final %>%
fit( playlist_genre ~ . , data = Spotify_juiced )
Spotify_knn_preds <- predict( Spotify_knn, new_data = Spotify_baked,
type = "class" )
Spotify_knn_preds <- Spotify_knn_preds %>% bind_cols(dplyr::select(Spotify_baked, playlist_genre))
Spotify_knn_preds %>%
conf_mat( truth = playlist_genre, estimate = .pred_class)
specificity(Spotify_knn_preds, truth = playlist_genre, estimate = .pred_class)
sensitivity(Spotify_knn_preds, truth = playlist_genre, estimate = .pred_class)
rf_spec <- rand_forest(
mode = "classification",
mtry = tune(),
trees = 100,
min_n = tune()
) %>%
set_engine( "ranger", importance = "permutation"  )
set.seed( 1234 )
#Spotify_boots <- bootstraps( Spotify_juiced, times = 10)
rand_spec_grid <- grid_regular(
finalize( mtry(),
Spotify_juiced ),
min_n(),
levels = 5 )
rf_grid <- tune_grid( rf_spec, recipe(playlist_genre ~ ., Spotify_juiced), Spotify_cv, grid = rand_spec_grid, metrics = metric_set(roc_auc, spec, sens))
View(Spotify_rf_final)
rf_grid %>% collect_metrics()
Spotify_rf_best <- select_best(rf_grid, "sens")
Spotify_rf_final <- finalize_model( rf_spec, Spotify_rf_best)
Spotify_rf <- Spotify_rf_final %>%
fit( playlist_genre ~ . , data = Spotify_juiced )
Spotify_rf %>%
vip()
Spotify_rf_preds <- predict( Spotify_rf, new_data = Spotify_baked,
type = "class" )
Spotify_rf_preds <- Spotify_rf_preds %>% bind_cols(dplyr::select(Spotify_baked, playlist_genre))
Spotify_rf_preds %>%
conf_mat( truth = playlist_genre, estimate = .pred_class)
specificity(Spotify_rf_preds, truth = playlist_genre, estimate = .pred_class)
sensitivity(Spotify_rf_preds, truth = playlist_genre, estimate = .pred_class)
Spotify_recipe
View(Spotify_recipe)
Spotify_recipe[["var_info"]][["type"]]
Spotify_recipe[["var_info"]]
# 3800 (r&b)
new_data <- tibble(track_popularity = 62, danceability = 0.357, energy = 0.434, key = 0, loudness = -11.521, mode = 1, speechiness = 0.0418, acousticness = 0.244, instrumentalness = 0.00654, liveness = 0.0808, valence = 0.0907, tempo = 145.743, duration_ms = 257907)
new_data_baked <- bake(Spotify_prepped, new_data = new_data)
new_data_preds <- predict(Spotify_rf, new_data)
View(rf_grid)
rf_grid
new_data_preds <- predict(Spotify_knn, new_data)
Spotify_prepped
# 3800 (r&b)
new_data <- tibble(track_popularity = 62, danceability = 0.357, energy = 0.434, key = 0, loudness = -11.521, mode = 1, speechiness = 0.0418, acousticness = 0.244, instrumentalness = 0.00654, liveness = 0.0808, valence = 0.0907, tempo = 145.743, duration_ms = 257907, year_year = 2015)
new_data_preds <- predict(Spotify_rf, new_data)
View(new_data_preds)
new_data_baked <- bake(Spotify_prepped, new_data = new_data)
outcomes <- [0:36]
outcomes <- (0:36)
length(outcomes)
length(outcomes<20)
length(outcomes)
count(outcomes<20)
?coount
?count
count <- 0
for (i in length(outcomes)){
if (outcomes[i]<20){
count <- count + 1
}
}
outcomes[1]
outcomes[6]
for (i in length(outcomes)){
if (outcomes[i]<20){
count <- count + 1
}
}
count <- 0
for (i in length(outcomes)){
if (outcomes[i]<20){
count++
}
}
count <- count +1
for (i in length(outcomes)){
if (outcomes[i]<20){
count <- count +1
}
}
count <- 0
for (i in length(outcomes)){
if (16<20){
count <- count +1
}
}
count <- 0
for (i in length(outcomes)){
if (16<20){
count <- count +1
}
}
for (i in length(outcomes)){
if (outcomes[i]<20){
count <- count +1
}
}
count <- 0
for (i in length(outcomes)){
if (outcomes[i]<20){
count <- count +1
}
}
for (i in 1:length(outcomes)){
if (outcomes[i]<20){
count <- count +1
}
}
proba <- count/length(outcomes)
## (ii) (b)
count <- 0
for (i in 1:length(outcomes)){
if (outcomes[i]>= 10){
count <- count +1
}
}
proba <- count/length(outcomes)
## (ii) (c)
count <- 0
for (i in 1:length(outcomes)){
if (3<outcomes[i]<=9){
count <- count +1
}
}
if (outcomes[i]>3 && outcomes[i]<=9){
count <- count +1
}
## (ii) (c)
count <- 0
for (i in 1:length(outcomes)){
if (outcomes[i]>3 && outcomes[i]<=9){
count <- count +1
}
}
proba <- count/length(outcomes)
source("C:/Users/mhman/Desktop/Certificate Actuary/CS1/Part 1/Exercise2_01.R", echo=TRUE)
?sample
S1 <- sample(c(R,B), 1000)
## (iii)
set.seed(37)
S1 <- sample(c(1,0), 1000)
S1 <- sample(c(1,0), 1000, replace = TRUE)
S1
S1 <- sample(outcomes, 1000, replace = TRUE)
S1
table(S1)
tableS1 <- table(S1)
tableS1
hist(tableS1)
?hist
hist(tableS1, breaks = 37)
hist(tableS1, breaks = 0:36)
hist(tableS1)
hist(tableS1, xlim = c(0,37))
hist(tableS1, xlim = c(0,37))
hist(tableS1)
tableS1
hist(S1)
hist(S1, breaks = 37)
## (iii)
set.seed(37)
S1 <- sample(outcomes, 1000, replace = TRUE)
S1
tableS1 <- table(S1)
tableS1
hist(S1, breaks = 37)
hist(S1, bins = 1)
hist(S1, breaks = 37)
hist(S1, breaks = 37, center)
hist(S1, breaks = 37)
?hist
hist(S1, breaks = 37, mids)
hist(S1, mids)
hist(S1, breaks = 0:37)
hist(S1, breaks = -0.5:36.5)
## (vi) (a)
count <- 0
for (i in 1:length(S1)){
if (S1[i]<20){
count <- count +1
}
}
proba <- count/length(S1)
## (vi) (b)
count <- 0
for (i in 1:length(S1)){
if (S1[i]>= 10){
count <- count +1
}
}
probb <- count/length(S1)
## (vi) (c)
count <- 0
for (i in 1:length(S1)){
if (S1[i]>3 && S1[i]<=9){
count <- count +1
}
}
probc <- count/length(S1)
## (v)(a)
mean(S1)
## (v) (b)
sa(S1)
## (v)(b)
sd(S1)
## (v)(b)
median(S1)
##(v)(c)
sd(S1)
??skewness
##(v)(d)
skewness(S1)
##(v)(d)
pacman::p_load(moments)
skewness(S1)
n <-10
p <- 0.7
rbinom(n,500,p)
rbinom(500,n,p)
S <- rbinom(500,n,p)
table(S)
n <-10
p <- 0.7
## (i)
set.seed(37)
S <- rbinom(500,n,p)
table(S)
## (ii) (b)
table(B)/length(B)
B <- rbinom(500,n,p)
## (ii) (a)
table(B)
## (ii) (b)
table(B)/length(B)
## (i)
set.seed(37)
B <- rbinom(500,n,p)
## (ii) (a)
table(B)
## (ii) (b)
table(B)/length(B)
## (iii) (c)
x <- 0:10
round(dbinom(x,n,p),2)
## (i)
set.seed(37)
B <- rbinom(500,n,p)
## (ii) (a)
table(B)
## (ii) (b)
table(B)/length(B)
## (iii) (c)
x <- 0:10
round(dbinom(x,n,p),2)
round(dbinom(x,n,p),3)
## (i)
set.seed(37)
B <- rbinom(500,n,p)
## (ii) (a)
table(B)
## (ii) (b)
table(B)/length(B)
## (iii) (c)
x <- 0:10
round(dbinom(x,n,p),3)
## (ii) (d)
length(B[B<=6])/length(B)
pbinom(6,n,p)
## (iii) (a)
hist(B, breaks = -0.5:10.5)
## (iii) (b)
lines(x,100*dbinom(x,n,p), type = "o", col = "red")
## (iii) (b)
lines(x,500*dbinom(x,n,p), type = "o", col = "red")
## (iii) (a)
hist(B, breaks = -0.5:10.5)
## (iii) (b)
lines(x,500*dbinom(x,n,p), type = "o", col = "red")
## (iii) (a)
hist(B, breaks = -0.5:10.5)
## (iii) (b)
lines(x,500*dbinom(x,n,p), col = "red")
## (iii) (a)
hist(B, breaks = -0.5:10.5)
## (iii) (b)
lines(x,500*dbinom(x,n,p), type = "o", col = "red")
## (iv) (a)
mean(B)
n*p
## (iv) (b)
sd(B)
(n*p*(1-p))^(1/2)
## (iv) (b)
sd(B)
## (iv) (c)
quantile(B, 0.75) - quantile(B, 0.25)
qbinom(0.75, n, p) - qbinom(0.25,n,p)
## (v) (a)
StdDev <- zeros(500)
## (v) (a)
StdDev <- seq(0,500)
## (v) (a)
StdDev <- rep(0,500)
StdDev[i] <- sd(B[1:i])
## (v) (b)
for (i in 1:500){
StdDev[i] <- sd(B[1:i])
}
## (v) (c)
x <- 1:500
plot(x, StdDev)
abline(h=2, col="red")
(n*p*(1-p))^(1/2)
abline(h=1.45, col="red")
abline(h=1.45, col="red", lty = 2)
mean(run, na.rm = TRUE)
source("~/GitHub/MCM/Trading Data/initial_analysis.R", echo=TRUE)
setwd("~/GitHub/MCM/Trading Data")
mean(run, na.rm = TRUE)
gold <- read.csv("gold.csv")
for (i in 1:length(gold$Value)){
if (is.nan(gold[i,2])){
gold[i,2] = NA
}
}
pacman::p_load(tidyverse)
j<-0
sum <- 0
exp_value <- as_tibble(matrix(0, nrow = length(gold$Value), ncol = 1))
for (i in 1:length(gold$Value)){
run <- gold[1:i,2]
mean(run, na.rm = TRUE)
}
View(exp_value)
exp_value [i,1] <- mean(run, na.rm = TRUE)
View(exp_value)
gold <- read.csv("gold.csv")
View(exp_value)
gold <- read.csv("gold.csv")
for (i in 1:length(gold$Value)){
if (is.nan(gold[i,2])){
gold[i,2] = NA
}
}
pacman::p_load(tidyverse)
j<-0
sum <- 0
exp_value <- as_tibble(matrix(0, nrow = length(gold$Value), ncol = 1))
for (i in 1:length(gold$Value)){
run <- gold[1:i,2]
exp_value [i,1] <- mean(run, na.rm = TRUE)
}
View(exp_value)
gold <- read.csv("gold.csv")
for (i in 1:length(gold$Value)){
if (is.nan(gold[i,2])){
gold[i,2] = NA
}
}
pacman::p_load(tidyverse)
j<-0
sum <- 0
exp_value <- as_tibble(matrix(0, nrow = length(gold$Value), ncol = 1))
sd <- as_tibble(matrix(0, nrow = length(gold$Value), ncol = 1))
for (i in 1:length(gold$Value)){
run <- gold[1:i,2]
exp_value [i,1] <- mean(run, na.rm = TRUE)
sd[i,1] <- sd(run, na.rm = TRUE)
}
View(sd)
gold <- read.csv("gold.csv")
gold <- read.csv("gold.csv")
pacman::p_load(tidyverse)
j<-0
sum <- 0
exp_value <- as_tibble(matrix(0, nrow = length(gold$Value), ncol = 1))
sd <- as_tibble(matrix(0, nrow = length(gold$Value), ncol = 1))
for (i in 1:length(gold$Value)){
run <- gold[1:i,2]
exp_value [i,1] <- mean(run, na.rm = TRUE)
sd[i,1] <- sd(run, na.rm = TRUE)
}
View(exp_value)
View(sd)
gold <- data.frame(gold, exp_value, sd)
View(gold)
# read in data
bitcoin <- read.csv("bitcoin.csv")
# load package
pacman::p_load(tidyverse)
# define zero matrices
exp_value <- as_tibble(matrix(0, nrow = length(gold$Value), ncol = 1))
sd <- as_tibble(matrix(0, nrow = length(gold$Value), ncol = 1))
# finding running mean and standard deviation
for (i in 1:length(bitcoin$Value)){
run <- bitcoin[1:i,2]
exp_value [i,1] <- mean(run, na.rm = TRUE)
sd[i,1] <- sd(run, na.rm = TRUE)
}
# combine mean and standard deviation to original data
bitcoin <- data.frame(bitcoin, exp_value, sd)
View(bitcoin)
