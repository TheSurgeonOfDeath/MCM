# option 1
pnorm(q=0.56,mean=0.6,sd=sd)
s = 0.215
# option 1
pnorm(q=0.56,mean=0.6,sd=s)
# option 2
pnorm(q=0.6,mean=0.6,sd=sd)-pnorm(q=0.56,mean=0.6,sd=s)
# option 2
pnorm(q=0.6,mean=0.6,sd=s)-pnorm(q=0.56,mean=0.6,sd=s)
# option 3
1-pnorm(q=0.6,mean=0.6,sd=s)
# option 1
pnorm(q=0.56,mean=0.6,sd=s)
# P(X≤c) = p, finding c, X~N(mu,sigma)
qnorm(p=0.01,mean=10,sd=5) # gives c:P(X≤c) = 0.01
# P(5≤X≤15) = P(X≤15)−P(X≤5)
pnorm(15,10,5)-pnorm(5,10,5)
# option 1
pnorm(q=0.56,mean=0.6,sd=s)
# option 1
pnorm(q=0.56,mean=0.6,sd=s)/2
# option 1
pnorm(q=0.56,mean=0.6,sd=s)/sqrt(10)
# option 1
pnorm(q=0.56,mean=0.6,sd=s)
s = 0.215/sqrt(10)
# option 1
pnorm(q=0.56,mean=0.6,sd=s)
# option 1
pnorm(q=0.56,mean=0.6,sd=s)
# option 2
pnorm(q=0.6,mean=0.6,sd=s)-pnorm(q=0.56,mean=0.6,sd=s)
# option 3
1-pnorm(q=0.6,mean=0.6,sd=s)
x = 0.6
while (x <= 0.84)
{
# option 1
pnorm(q=0.56,mean=x,sd=s)
# option 2
pnorm(q=0.6,mean=x,sd=s)-pnorm(q=0.56,mean=x,sd=s)
# option 3
1-pnorm(q=0.6,mean=x,sd=s)
}
s
{
# option 1
pnorm(q=0.56,mean=x,sd=s)
# option 2
pnorm(q=0.6,mean=x,sd=s)-pnorm(q=0.56,mean=x,sd=s)
# option 3
1-pnorm(q=0.6,mean=x,sd=s)
}
x = 0.6
while (x <= 0.84)
{
# option 1
pnorm(q=0.56,mean=x,sd=s)
# option 2
pnorm(q=0.6,mean=x,sd=s)-pnorm(q=0.56,mean=x,sd=s)
# option 3
1-pnorm(q=0.6,mean=x,sd=s)
x = x + 0.4
}
# option 1
pnorm(q=0.56,mean=x,sd=s)
# option 1
print(pnorm(q=0.56,mean=x,sd=s))
{
# option 1
print(pnorm(q=0.56,mean=x,sd=s))
# option 2
print(pnorm(q=0.6,mean=x,sd=s)-pnorm(q=0.56,mean=x,sd=s))
# option 3
print(1-pnorm(q=0.6,mean=x,sd=s))
x = x + 0.4
}
s = 0.215/sqrt(10)
x = 0.6
while (x <= 0.84)
{
# option 1
print(pnorm(q=0.56,mean=x,sd=s))
# option 2
print(pnorm(q=0.6,mean=x,sd=s)-pnorm(q=0.56,mean=x,sd=s))
# option 3
print(1-pnorm(q=0.6,mean=x,sd=s))
x = x + 0.4
}
x = 0.6
while (x <= 0.84)
{
# option 1
print(pnorm(q=0.56,mean=x,sd=s))
# option 2
print(pnorm(q=0.6,mean=x,sd=s)-pnorm(q=0.56,mean=x,sd=s))
# option 3
print(1-pnorm(q=0.6,mean=x,sd=s))
x = x + 0.4
}
x = 0.6
while (x <= 0.84)
{
# option 1
print(pnorm(q=0.56,mean=x,sd=s))
# option 2
print(pnorm(q=0.6,mean=x,sd=s)-pnorm(q=0.56,mean=x,sd=s))
# option 3
print(1-pnorm(q=0.6,mean=x,sd=s))
x = x + 0.04
}
# option 1
print(round(pnorm(q=0.56,mean=x,sd=s),3))
x = 0.6
while (x <= 0.84)
{
# option 1
print(round(pnorm(q=0.56,mean=x,sd=s),3))
# option 2
print(round(pnorm(q=0.6,mean=x,sd=s)-pnorm(q=0.56,mean=x,sd=s),3))
# option 3
print(round(1-pnorm(q=0.6,mean=x,sd=s).3))
x = x + 0.04
}
x = 0.6
while (x <= 0.84)
{
# option 1
print(round(pnorm(q=0.56,mean=x,sd=s),3))
# option 2
print(round(pnorm(q=0.6,mean=x,sd=s)-pnorm(q=0.56,mean=x,sd=s),3))
# option 3
print(round(1-pnorm(q=0.6,mean=x,sd=s),3))
x = x + 0.04
}
print(x\n)
print(x"\n")
print(x+"\n")
print(x)
print("\n")
print("")
print()
x = 0.6
while (x <= 0.84)
{
print(x)
print("")
# option 1
print(round(pnorm(q=0.56,mean=x,sd=s),3))
# option 2
print(round(pnorm(q=0.6,mean=x,sd=s)-pnorm(q=0.56,mean=x,sd=s),3))
# option 3
print(round(1-pnorm(q=0.6,mean=x,sd=s),3))
x = x + 0.04
}
x = 0.6
while (x <= 0.84)
{
print("")
print(x)
print("")
# option 1
print(round(pnorm(q=0.56,mean=x,sd=s),3))
# option 2
print(round(pnorm(q=0.6,mean=x,sd=s)-pnorm(q=0.56,mean=x,sd=s),3))
# option 3
print(round(1-pnorm(q=0.6,mean=x,sd=s),3))
x = x + 0.04
}
x = 0.6
while (x <= 0.85)
{
print("")
print(x)
print("")
# option 1
print(round(pnorm(q=0.56,mean=x,sd=s),3))
# option 2
print(round(pnorm(q=0.6,mean=x,sd=s)-pnorm(q=0.56,mean=x,sd=s),3))
# option 3
print(round(1-pnorm(q=0.6,mean=x,sd=s),3))
x = x + 0.04
}
x = 0.6
# option 1
print(round(1-pnorm(q=0.56,mean=x,sd=s),3))
# option 1
print(round(pnorm(1-q=0.56,mean=x,sd=s),3))*11
# option 1
print(round(pnorm(q=0.56,mean=x,sd=s),3))*11
# option 1
print(round(1-pnorm(q=0.56,mean=x,sd=s),3))*11
# option 1
1-pnorm(q=0.56,mean=x,sd=s)
# option 1
success=1-pnorm(q=0.56,mean=x,sd=s)
# option 1
success <- 1-pnorm(q=0.56,mean=x,sd=s)
pbinom(11,success)
pbinom(0.56,11,success)
pbinom(0.56,11,success)*11
# option 1
success <- 1-pnorm(q=0.56,mean=x,sd=s)
# option 1
success <- pnorm(q=0.56,mean=x,sd=s)
pbinom(0.56,11,success)*11
pbinom(1-0.56,11,success)*11
# option 1
success <- 1-pnorm(q=0.56,mean=x,sd=s)
pbinom(1-0.56,11,success)*11
# option 1
success <- 1-pnorm(q=0.56,mean=x,sd=s)
s = 0.215/sqrt(10)
1-0.574
s = 0.215
x = 0.6
# option 1
success <- 1-pnorm(q=0.56,mean=x,sd=s)
# option 1
print(round(1-pnorm(q=0.56,mean=x,sd=s),3))
s = 0.215
x = 0.6
while (x <= 0.85)
{
print("")
print(x)
print("")
# acceptable
print(round(1-pnorm(q=0.56,mean=x,sd=s),3))
x = x + 0.04
}
# Table 3 -----------------------------------------------------------------
s = 0.215
x = 0.6
# acceptable
p = 1-pnorm(q=0.56,mean=x,sd=s)
print(pbinom(50,100,p))
print(1-pbinom(50,100,p))
print(1-pbinom(50-1,100,p))
for (i in 50:10:100) {
print(1-pbinom(i-1,100,p))
}
for (i in seq(50,100,10) {
print(1-pbinom(i-1,100,p))
}
x = x + 0.04
}
for (i in seq(50,100,10)) {
print(1-pbinom(i-1,100,p))
}
for (i in seq(50,100,10)) {
print(i)
print(1-pbinom(i-1,100,p))
}
while (x <= 0.85)
{
print("")
print(x)
print("")
# acceptable
p = 1-pnorm(q=0.56,mean=x,sd=s)
for (i in seq(50,100,10)) {
print(i)
print(1-pbinom(i-1,100,p))
}
x = x + 0.04
}
# acceptable
p = 1-pnorm(q=0.56,mean=x,sd=s)
# Table 3 -----------------------------------------------------------------
s = 0.215
x = 0.6
# acceptable
p = 1-pnorm(q=0.56,mean=x,sd=s)
# acceptable
print(round(1-pnorm(q=0.56,mean=x,sd=s),3))
s = 0.215
x = 0.6
while (x <= 0.85)
{
print("")
print(x)
print("")
# acceptable
p = 1-pnorm(q=0.56,mean=x,sd=s)
for (i in seq(50,100,10)) {
print(i)
print(1-pbinom(i-1,100,p))
}
x = x + 0.04
}
print(round(1-pbinom(i-1,100,p),3))
s = 0.215
x = 0.6
while (x <= 0.85)
{
print("")
print(x)
print("")
# acceptable
p = 1-pnorm(q=0.56,mean=x,sd=s)
for (i in seq(50,100,10)) {
print(i)
print(round(1-pbinom(i-1,100,p),3))
}
x = x + 0.04
}
print(round(1-pnorm(q=0.56,mean=0.6,sd=s),3))
round(1-pbinom(50-1,100,p),3)
round(1-pbinom(50-1,100,0.574),3)
round(1-pbinom(60-1,100,0.574),3)
0.278*0.006
0.5*0.006
0.222*0.001
0.722*0.148
0.88*0.648
0.961*0.963
0.991*0.999
0.998*1
0.081*0.001
0.025*0.024
0.008*0.215
0.630
0.63*0.001
# load package
pacman::p_load(tidyverse)
# load package
pacman::p_load(tidyverse)
source("~/Documents/Bachelor of Mathematical Sciences (Advanced)/Year 1/MCM/MCM Code/MCM/Trading Data/initial_analysis.R", echo=TRUE)
# read in data
gold <- read.csv("gold_raw.csv")
# load package
pacman::p_load(tidyverse)
# define zero matrices
exp_value <- matrix(0, nrow = length(gold$Value), ncol = 1)
sd <- matrix(0, nrow = length(gold$Value), ncol = 1)
# finding running mean and standard deviation
for (i in 1:length(gold$Value)){
run <- gold[1:i,2]
exp_value [i,1] <- mean(run, na.rm = TRUE)
sd[i,1] <- sd(run, na.rm = TRUE)
}
# combine mean and standard deviation to original data
gold <- data.frame(gold, exp_value, sd)
# read in data
bitcoin <- read.csv("bitcoin.csv")
# load package
pacman::p_load(tidyverse)
# define zero matrices
exp_value <- matrix(0, nrow = length(bitcoin$Value), ncol = 1)
sd <- matrix(0, nrow = length(bitcoin$Value), ncol = 1)
# finding running mean and standard deviation
for (i in 1:length(bitcoin$Value)){
run <- bitcoin[1:i,2]
exp_value [i,1] <- mean(run, na.rm = TRUE)
sd[i,1] <- sd(run, na.rm = TRUE)
}
# combine mean and standard deviation to original data
bitcoin <- data.frame(bitcoin, exp_value, sd)
# define zero matrices
exp_perc_change <- matrix(0, nrow = length(gold$Value), ncol = 1)
diff <- matrix(0, nrow = length(gold$Value), ncol = 1)
perc_diff <- matrix(0, nrow = length(gold$Value), ncol = 1)
for (i in 3:length(gold$Value)-1){
if (!is.nan(gold[i,2])){
x<- gold[i,2]
}
if (!is.nan(gold[i+1,2])){
diff[i+1] <- (gold[i+1,2] - x)
perc_diff[i+1] <- (gold[i+1,2]-x)/x
}
gold <- data.frame(gold, diff, perc_diff)
for (i in 1:length(gold$diff)){
if (gold[i,5] == 0){
gold[i,5] = NA
}
# define zero matrices
exp_perc_change <- matrix(0, nrow = length(gold$Value), ncol = 1)
sd_perc_change <- matrix(0, nrow = length(gold$Value), ncol = 1)
exp_diff_change <- matrix(0, nrow = length(gold$Value), ncol = 1)
sd_diff_change <- matrix(0, nrow = length(gold$Value), ncol = 1)
for (i in 1:length(gold$Value)){
run <- gold[1:i,5]
runa <- gold[1:i,6]
exp_perc_change [i,1] <- mean(runa, na.rm = TRUE)
sd_perc_change[i,1] <- sd(runa, na.rm = TRUE)
exp_diff_change [i,1] <- mean(run, na.rm = TRUE)
sd_diff_change[i,1] <- sd(run, na.rm = TRUE)
}
gold <- data.frame(gold, exp_perc_change, sd_perc_change, exp_diff_change, sd_diff_change)
gbm_loop <- function(nsim = 100, t = 25, mu = 0, sigma = 0.1, S0 = 100, dt = 1./252) {
gbm <- matrix(ncol = nsim, nrow = t)
for (simu in 1:nsim) {
gbm[1, simu] <- S0
for (day in 2:t) {
epsilon <- rnorm(1)
dt = 1 / 365
gbm[day, simu] <- gbm[(day-1), simu] * exp((mu - sigma * sigma / 2) * dt + sigma * epsilon * sqrt(dt))
}
return(gbm)
}
library(tidyverse)
nsim <- 1
t <- 30
mu <- (gold[30,7] +1)^252-1
sigma <- gold[30,8] * sqrt(252)
S0 <- gold[30,2]
gbm <- gbm_loop(nsim, t, mu, sigma, S0)
# PLOT GBM vs ACTUAL VALUES
gbm_df <- as.data.frame(gbm) %>%
mutate(day = 1:nrow(gbm) + 30) %>%
pivot_longer(-day, names_to = 'sim', values_to = 'predicted')
gbm_df <- data.frame(gbm_df, actual=gold$Value[30:59])
gbm_df <- gbm_df %>%
select(day, predicted, actual) %>%
gather(key = "variable", value = "value", -day)
ggplot(gbm_df, aes(x = day, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue"))+
theme(plot.title = element_text(size=12, face="bold",
margin = margin(10, 0, 10, 0))) +
ggtitle("Brownian Motion Model for Gold Price for 30 days using previous 30 day data")
# gbm_df %>%
#   ggplot(aes(x=ix)) +
# gbm_df %>%
#   ggplot(aes(x=ix)) +
#   geom_line(aes(y =price) , color = 'red') +
# gbm_df %>%
#   ggplot(aes(x=ix)) +
#   geom_line(aes(y =price) , color = 'red') +
#   geom_line(aes(y =actual), color = 'blue') +
# plot(gbm_df$ix, gbm_df$price, type = 'l', col = 'red')
# for (i in 1:length(gold$Value)){
source("~/Documents/Bachelor of Mathematical Sciences (Advanced)/Year 1/MCM/MCM Code/MCM/Trading Data/initial_analysis.R", echo=TRUE)
setwd("~/Documents/Bachelor of Mathematical Sciences (Advanced)/Year 1/MCM/MCM Code/MCM/Trading Data")
source("~/Documents/Bachelor of Mathematical Sciences (Advanced)/Year 1/MCM/MCM Code/MCM/Trading Data/initial_analysis.R", echo=TRUE)
View(gold)
