end <- current_day + t - 1
gbm_df <- data.frame(gbm_df, actual=summary$Value[current_day:end])
# gbm_df <- as.data.frame(gbm) %>%
#   mutate(day = 1:nrow(gbm) + current_day -1) %>%
#   pivot_longer(-day, names_to = 'sim', values_to = 'predicted')
# end <- current_day + t - 1
# gbm_df <- data.frame(gbm_df, actual=data$Value[current_day:end])
# gbm_df <- gbm_df %>%
#   select(day, predicted, actual) %>%
#   gather(key = "variable", value = "value", -day)
return(avg)
}
gbm_df <- gbm_price_pred(summary, 100, 30, summary$Value[125], 252, 125)
gbm_price_pred <- function(data, nsim = 100, t = 25, S0 = 100, td = 252, current_day = 10) {
# adjustment for t ( code functionality )
t <- t + 1
b <- current_day - t
if (b<1){
b = 1
}
runa <- data[b:current_day,6]
exp_perc <- mean(runa, na.rm = TRUE)
sd_perc <- sd(runa, na.rm = TRUE)
# calculate drift
mu <- (exp_perc +1)^td-1
# calculate volatility
sigma <- sd_perc * sqrt(td)
# define matrix
gbm <- matrix(ncol = nsim, nrow = t)
# reciprocal of the number of trading days
dt <- 1/td
# calculate the predicted price for future days
set.seed(100)
e_vec <- rnorm(nsim)
for (i in 1:nsim) {
gbm[1, i] <- S0
for (day in 2:t) {
e <- e_vec[i]
gbm[day, i] <- gbm[(day-1), i] * exp((mu - sigma * sigma / 2) * dt + sigma * e * sqrt(dt))
}
}
gbm_df <- as.data.frame(gbm)
avg <- matrix(0, nrow = dim(gbm_df)[1], ncol = 1)
#
# for (i  in 1:dim(gbm_df)[1]){
#
#   run <- gbm_df[i,1:dim(gbm_df)[2]]
#   sum <- 0
#   for (j in 1:length(run)){
#     sum <- sum + run[j]
#   }
#
#   avg[i,1] <- sum/length(run)
# }
#
avg <- data.frame(avg)
days <- 1:nrow(gbm) + current_day -1
gbm_df <- data.frame(days, gbm_df)
end <- current_day + t - 1
gbm_df <- data.frame(gbm_df, actual=summary$Value[current_day:end])
# gbm_df <- as.data.frame(gbm) %>%
#   mutate(day = 1:nrow(gbm) + current_day -1) %>%
#   pivot_longer(-day, names_to = 'sim', values_to = 'predicted')
# end <- current_day + t - 1
# gbm_df <- data.frame(gbm_df, actual=data$Value[current_day:end])
# gbm_df <- gbm_df %>%
#   select(day, predicted, actual) %>%
#   gather(key = "variable", value = "value", -day)
return(avg)
}
gbm_df <- gbm_price_pred(summary, 100, 30, summary$Value[125], 252, 125)
View(gbm_df)
dim(gbm_df)[1]
gbm_df[i,1:dim(gbm_df)[2]]
gbm_price_pred <- function(data, nsim = 100, t = 25, S0 = 100, td = 252, current_day = 10) {
# adjustment for t ( code functionality )
t <- t + 1
b <- current_day - t
if (b<1){
b = 1
}
runa <- data[b:current_day,6]
exp_perc <- mean(runa, na.rm = TRUE)
sd_perc <- sd(runa, na.rm = TRUE)
# calculate drift
mu <- (exp_perc +1)^td-1
# calculate volatility
sigma <- sd_perc * sqrt(td)
# define matrix
gbm <- matrix(ncol = nsim, nrow = t)
# reciprocal of the number of trading days
dt <- 1/td
# calculate the predicted price for future days
set.seed(100)
e_vec <- rnorm(nsim)
for (i in 1:nsim) {
gbm[1, i] <- S0
for (day in 2:t) {
e <- e_vec[i]
gbm[day, i] <- gbm[(day-1), i] * exp((mu - sigma * sigma / 2) * dt + sigma * e * sqrt(dt))
}
}
gbm_df <- as.data.frame(gbm)
avg <- matrix(0, nrow = dim(gbm_df)[1], ncol = 1)
for (i  in 1:dim(gbm_df)[1]){
run <- gbm_df[i,1:dim(gbm_df)[2]]
sum <- 0
for (j in 1:length(run)){
sum <- sum + run[j]
}
avg[i,1] <- sum/length(run)
}
avg <- data.frame(avg)
days <- 1:nrow(gbm) + current_day -1
gbm_df <- data.frame(days, gbm_df)
end <- current_day + t - 1
gbm_df <- data.frame(gbm_df, actual=summary$Value[current_day:end])
# gbm_df <- as.data.frame(gbm) %>%
#   mutate(day = 1:nrow(gbm) + current_day -1) %>%
#   pivot_longer(-day, names_to = 'sim', values_to = 'predicted')
# end <- current_day + t - 1
# gbm_df <- data.frame(gbm_df, actual=data$Value[current_day:end])
# gbm_df <- gbm_df %>%
#   select(day, predicted, actual) %>%
#   gather(key = "variable", value = "value", -day)
return(avg)
}
gbm_df <- gbm_price_pred(summary, 100, 30, summary$Value[125], 252, 125)
gbm_price_pred <- function(data, nsim = 100, t = 25, S0 = 100, td = 252, current_day = 10) {
# adjustment for t ( code functionality )
t <- t + 1
b <- current_day - t
if (b<1){
b = 1
}
runa <- data[b:current_day,6]
exp_perc <- mean(runa, na.rm = TRUE)
sd_perc <- sd(runa, na.rm = TRUE)
# calculate drift
mu <- (exp_perc +1)^td-1
# calculate volatility
sigma <- sd_perc * sqrt(td)
# define matrix
gbm <- matrix(ncol = nsim, nrow = t)
# reciprocal of the number of trading days
dt <- 1/td
# calculate the predicted price for future days
set.seed(100)
e_vec <- rnorm(nsim)
for (i in 1:nsim) {
gbm[1, i] <- S0
for (day in 2:t) {
e <- e_vec[i]
gbm[day, i] <- gbm[(day-1), i] * exp((mu - sigma * sigma / 2) * dt + sigma * e * sqrt(dt))
}
}
gbm_df <- as.data.frame(gbm)
avg <- matrix(0, nrow = dim(gbm_df)[1], ncol = 1)
for (i  in 1:dim(gbm_df)[1]){
run <- gbm_df[i,1:dim(gbm_df)[2]]
sum <- 0
for (j in 1:length(run)){
sum <- sum + run[j]
}
avg[i] <- sum/length(run)
}
avg <- data.frame(avg)
days <- 1:nrow(gbm) + current_day -1
gbm_df <- data.frame(days, gbm_df)
end <- current_day + t - 1
gbm_df <- data.frame(gbm_df, actual=summary$Value[current_day:end])
# gbm_df <- as.data.frame(gbm) %>%
#   mutate(day = 1:nrow(gbm) + current_day -1) %>%
#   pivot_longer(-day, names_to = 'sim', values_to = 'predicted')
# end <- current_day + t - 1
# gbm_df <- data.frame(gbm_df, actual=data$Value[current_day:end])
# gbm_df <- gbm_df %>%
#   select(day, predicted, actual) %>%
#   gather(key = "variable", value = "value", -day)
return(avg)
}
gbm_df <- gbm_price_pred(summary, 100, 30, summary$Value[125], 252, 125)
View(gbm_df)
gbm_price_pred <- function(data, nsim = 100, t = 25, S0 = 100, td = 252, current_day = 10) {
# adjustment for t ( code functionality )
t <- t + 1
b <- current_day - t
if (b<1){
b = 1
}
runa <- data[b:current_day,6]
exp_perc <- mean(runa, na.rm = TRUE)
sd_perc <- sd(runa, na.rm = TRUE)
# calculate drift
mu <- (exp_perc +1)^td-1
# calculate volatility
sigma <- sd_perc * sqrt(td)
# define matrix
gbm <- matrix(ncol = nsim, nrow = t)
# reciprocal of the number of trading days
dt <- 1/td
# calculate the predicted price for future days
set.seed(100)
e_vec <- rnorm(nsim)
for (i in 1:nsim) {
gbm[1, i] <- S0
for (day in 2:t) {
e <- e_vec[i]
gbm[day, i] <- gbm[(day-1), i] * exp((mu - sigma * sigma / 2) * dt + sigma * e * sqrt(dt))
}
}
gbm_df <- as.data.frame(gbm)
avg <- matrix(0, nrow = dim(gbm_df)[1], ncol = 1)
avg <- data.frame(avg)
for (i  in 1:dim(gbm_df)[1]){
run <- gbm_df[i,1:dim(gbm_df)[2]]
sum <- 0
for (j in 1:length(run)){
sum <- sum + run[j]
}
avg[i] <- sum/length(run)
}
days <- 1:nrow(gbm) + current_day -1
gbm_df <- data.frame(days, gbm_df)
end <- current_day + t - 1
gbm_df <- data.frame(gbm_df, actual=summary$Value[current_day:end])
# gbm_df <- as.data.frame(gbm) %>%
#   mutate(day = 1:nrow(gbm) + current_day -1) %>%
#   pivot_longer(-day, names_to = 'sim', values_to = 'predicted')
# end <- current_day + t - 1
# gbm_df <- data.frame(gbm_df, actual=data$Value[current_day:end])
# gbm_df <- gbm_df %>%
#   select(day, predicted, actual) %>%
#   gather(key = "variable", value = "value", -day)
return(avg)
}
gbm_df <- gbm_price_pred(summary, 100, 30, summary$Value[125], 252, 125)
View(gbm_df)
View(gbm_df)
gbm_price_pred <- function(data, nsim = 100, t = 25, S0 = 100, td = 252, current_day = 10) {
# adjustment for t ( code functionality )
t <- t + 1
b <- current_day - t
if (b<1){
b = 1
}
runa <- data[b:current_day,6]
exp_perc <- mean(runa, na.rm = TRUE)
sd_perc <- sd(runa, na.rm = TRUE)
# calculate drift
mu <- (exp_perc +1)^td-1
# calculate volatility
sigma <- sd_perc * sqrt(td)
# define matrix
gbm <- matrix(ncol = nsim, nrow = t)
# reciprocal of the number of trading days
dt <- 1/td
# calculate the predicted price for future days
set.seed(100)
e_vec <- rnorm(nsim)
for (i in 1:nsim) {
gbm[1, i] <- S0
for (day in 2:t) {
e <- e_vec[i]
gbm[day, i] <- gbm[(day-1), i] * exp((mu - sigma * sigma / 2) * dt + sigma * e * sqrt(dt))
}
}
gbm_df <- as.data.frame(gbm)
avg <- matrix(0, nrow = dim(gbm_df)[1], ncol = 1)
avg <- data.frame(avg)
for (i  in 1:dim(gbm_df)[1]){
run <- gbm_df[i,1:dim(gbm_df)[2]]
sum <- 0
for (j in 1:length(run)){
sum <- sum + run[j]
}
avg[i,1] <- sum/length(run)
}
days <- 1:nrow(gbm) + current_day -1
gbm_df <- data.frame(days, gbm_df)
end <- current_day + t - 1
gbm_df <- data.frame(gbm_df, actual=summary$Value[current_day:end])
# gbm_df <- as.data.frame(gbm) %>%
#   mutate(day = 1:nrow(gbm) + current_day -1) %>%
#   pivot_longer(-day, names_to = 'sim', values_to = 'predicted')
# end <- current_day + t - 1
# gbm_df <- data.frame(gbm_df, actual=data$Value[current_day:end])
# gbm_df <- gbm_df %>%
#   select(day, predicted, actual) %>%
#   gather(key = "variable", value = "value", -day)
return(avg)
}
gbm_df <- gbm_price_pred(summary, 100, 30, summary$Value[125], 252, 125)
View(gbm_df)
gbm_price_pred <- function(data, nsim = 100, t = 25, S0 = 100, td = 252, current_day = 10) {
# adjustment for t ( code functionality )
t <- t + 1
b <- current_day - t
if (b<1){
b = 1
}
runa <- data[b:current_day,6]
exp_perc <- mean(runa, na.rm = TRUE)
sd_perc <- sd(runa, na.rm = TRUE)
# calculate drift
mu <- (exp_perc +1)^td-1
# calculate volatility
sigma <- sd_perc * sqrt(td)
# define matrix
gbm <- matrix(ncol = nsim, nrow = t)
# reciprocal of the number of trading days
dt <- 1/td
# calculate the predicted price for future days
set.seed(100)
e_vec <- rnorm(nsim)
for (i in 1:nsim) {
gbm[1, i] <- S0
for (day in 2:t) {
e <- e_vec[i]
gbm[day, i] <- gbm[(day-1), i] * exp((mu - sigma * sigma / 2) * dt + sigma * e * sqrt(dt))
}
}
gbm_df <- as.data.frame(gbm)
avg <- matrix(0, nrow = dim(gbm_df)[1], ncol = 1)
avg <- data.frame(avg)
for (i  in 1:dim(gbm_df)[1]){
run <- gbm_df[i,1:dim(gbm_df)[2]]
sum <- 0
for (j in 1:length(run)){
sum <- sum + run[j]
}
avg[i,1] <- sum/length(run)
}
days <- 1:nrow(gbm) + current_day -1
gbm_df <- data.frame(days, gbm_df, avg)
end <- current_day + t - 1
gbm_df <- data.frame(gbm_df, actual=summary$Value[current_day:end])
# gbm_df <- as.data.frame(gbm) %>%
#   mutate(day = 1:nrow(gbm) + current_day -1) %>%
#   pivot_longer(-day, names_to = 'sim', values_to = 'predicted')
# end <- current_day + t - 1
# gbm_df <- data.frame(gbm_df, actual=data$Value[current_day:end])
# gbm_df <- gbm_df %>%
#   select(day, predicted, actual) %>%
#   gather(key = "variable", value = "value", -day)
return(gbm_df)
}
gbm_df <- gbm_price_pred(summary, 100, 30, summary$Value[125], 252, 125)
View(gbm_df)
gbm_price_pred <- function(data, nsim = 100, t = 25, S0 = 100, td = 252, current_day = 10) {
# adjustment for t ( code functionality )
t <- t + 1
b <- current_day - t
if (b<1){
b = 1
}
runa <- data[b:current_day,6]
exp_perc <- mean(runa, na.rm = TRUE)
sd_perc <- sd(runa, na.rm = TRUE)
# calculate drift
mu <- (exp_perc +1)^td-1
# calculate volatility
sigma <- sd_perc * sqrt(td)
# define matrix
gbm <- matrix(ncol = nsim, nrow = t)
# reciprocal of the number of trading days
dt <- 1/td
# calculate the predicted price for future days
set.seed(100)
e_vec <- rnorm(nsim)
for (i in 1:nsim) {
gbm[1, i] <- S0
for (day in 2:t) {
e <- e_vec[i]
gbm[day, i] <- gbm[(day-1), i] * exp((mu - sigma * sigma / 2) * dt + sigma * e * sqrt(dt))
}
}
gbm_df <- as.data.frame(gbm)
avg <- matrix(0, nrow = dim(gbm_df)[1], ncol = 1)
avg <- data.frame(avg)
for (i  in 1:dim(gbm_df)[1]){
run <- gbm_df[i,1:dim(gbm_df)[2]]
sum <- 0
for (j in 1:length(run)){
sum <- sum + run[j]
}
avg[i,1] <- sum/length(run)
}
days <- 1:nrow(gbm) + current_day -1
gbm_df <- data.frame(days, gbm_df, avg)
end <- current_day + t - 1
gbm_df <- data.frame(gbm_df, actual=summary$Value[current_day:end])
# gbm_df <- as.data.frame(gbm) %>%
#   mutate(day = 1:nrow(gbm) + current_day -1) %>%
#   pivot_longer(-day, names_to = 'sim', values_to = 'predicted')
# end <- current_day + t - 1
# gbm_df <- data.frame(gbm_df, actual=data$Value[current_day:end])
# gbm_df <- gbm_df %>%
#   select(day, predicted, actual) %>%
#   gather(key = "variable", value = "value", -day)
# returning drift and final price
drift <- mu
final_price <- gbm_df$avg[dim(gbm_df)[1]]
mylist <- list("drift" = drift, "final price" = final_price)
return(mylist)
}
gbm_df <- gbm_price_pred(summary, 100, 30, summary$Value[125], 252, 125)
View(gbm_df)
gbm_price_pred <- function(data, nsim = 100, t = 25, S0 = 100, td = 252, current_day = 10) {
# adjustment for t ( code functionality )
t <- t + 1
b <- current_day - t
if (b<1){
b = 1
}
runa <- data[b:current_day,6]
exp_perc <- mean(runa, na.rm = TRUE)
sd_perc <- sd(runa, na.rm = TRUE)
# calculate drift
mu <- (exp_perc +1)^td-1
# calculate volatility
sigma <- sd_perc * sqrt(td)
# define matrix
gbm <- matrix(ncol = nsim, nrow = t)
# reciprocal of the number of trading days
dt <- 1/td
# calculate the predicted price for future days
set.seed(100)
e_vec <- rnorm(nsim)
for (i in 1:nsim) {
gbm[1, i] <- S0
for (day in 2:t) {
e <- e_vec[i]
gbm[day, i] <- gbm[(day-1), i] * exp((mu - sigma * sigma / 2) * dt + sigma * e * sqrt(dt))
}
}
gbm_df <- as.data.frame(gbm)
avg <- matrix(0, nrow = dim(gbm_df)[1], ncol = 1)
avg <- data.frame(avg)
for (i  in 1:dim(gbm_df)[1]){
run <- gbm_df[i,1:dim(gbm_df)[2]]
sum <- 0
for (j in 1:length(run)){
sum <- sum + run[j]
}
avg[i,1] <- sum/length(run)
}
days <- 1:nrow(gbm) + current_day -1
gbm_df <- data.frame(days, gbm_df, avg)
end <- current_day + t - 1
gbm_df <- data.frame(gbm_df, actual=summary$Value[current_day:end])
# gbm_df <- as.data.frame(gbm) %>%
#   mutate(day = 1:nrow(gbm) + current_day -1) %>%
#   pivot_longer(-day, names_to = 'sim', values_to = 'predicted')
# end <- current_day + t - 1
# gbm_df <- data.frame(gbm_df, actual=data$Value[current_day:end])
# gbm_df <- gbm_df %>%
#   select(day, predicted, actual) %>%
#   gather(key = "variable", value = "value", -day)
# returning drift and final price
drift <- mu
final_price <- gbm_df$avg[dim(gbm_df)[1]]
final_outputs <- data.frame(drift, final_price)
return(final_outputs)
}
gbm_df <- gbm_price_pred(summary, 100, 30, summary$Value[125], 252, 125)
View(gbm_df)
gbm_df <- gbm_price_pred(summary, 100, 3, summary$Value[3], 252, 3)
View(gbm_df)
View(summary)
2:5-1
1230>length(summary$Value)-30
for (i in 5:length(summary$Value)-1){
if (i<30){
j <- i
}else if (i>length(summary$Value)-30){
j<- length(summary$Value)-i
}else{
j <- 30
}
gbm_df <- gbm_price_pred(summary, 100, j, summary$Value[i], 252, i)
final <- final.append(gbm_df, ignore_index=True)
}
?append
?pd.contact
?pd.contact
??pd.contat
?pd.concat
??pd.concat
for (i in 5:length(summary$Value)-1){
if (i<30){
j <- i
}else if (i>length(summary$Value)-30){
j<- length(summary$Value)-i
}else{
j <- 30
}
gbm_df <- gbm_price_pred(summary, 100, j, summary$Value[i], 252, i)
final <- rbind(final, gbm_df)
}
final <- gbm_price_pred(summary, 100, 3, summary$Value[3], 252, 3)
for (i in 5:length(summary$Value)-1){
if (i<30){
j <- i
}else if (i>length(summary$Value)-30){
j<- length(summary$Value)-i
}else{
j <- 30
}
gbm_df <- gbm_price_pred(summary, 100, j, summary$Value[i], 252, i)
final <- rbind(final, gbm_df)
}
